#pragma once
#include "BuildingPlacer.h"
#include "BuildingPlanner.h"
#include "InformationManager.h"
#include "IntelManager.h"
#include "Debug.h"
#include "ResourceManager.h"

using namespace BWAPI;
using namespace BWTA;

std::set<WorkerUnit*> BuildingPlacer::builders;
bool BuildingPlacer::supplyProviderIsBeingBuild = false; 
bool BuildingPlacer::xpandIsBeingBuild = false;


void BuildingPlacer::onStart(){
	
}

void BuildingPlacer::onFrame(){

	if (InformationManager::reservedMinerals < 0){
		InformationManager::reservedMinerals = 0;
	}
	if (InformationManager::reservedGas < 0){
		InformationManager::reservedGas = 0;
	}
	//for (auto buildtype : BuildingPlanner::findOrder()){
	//	bool canAfford = buildtype.unitType.mineralPrice() <= (Broodwar->self()->minerals() - InformationManager::reservedMinerals) 
	//					 && buildtype.unitType.gasPrice() <= (Broodwar->self()->gas() - InformationManager::reservedGas);
	//	bool ip = false;
	//	for (auto bu : builders){
	//		if (bu->buildingProject == buildtype.unitType)
	//			ip = true;
	//	}

	//	if (canAfford){
	//		if (!ip && Broodwar->self()->incompleteUnitCount(buildtype.unitType) < 1){
	//			if (buildtype.unitType.isBuilding()){
	//				hireBuilder(buildtype.unitType);
	//			}
	//			else{
	//				for (auto &u : Broodwar->self()->getUnits()){//Tp be refactored with more dynamic code
	//					if (u->canTrain(buildtype.unitType) && u->isIdle()){
	//						u->train(buildtype.unitType);
	//						//Broodwar << u->getType().toString() << " is building " << toBuild.toString() << std::endl;
	//						break;
	//					}
	//				}
	//			}

	//		}
	//	}
	//	else{
	//		break;
	//	}


	//}
	


	for (auto build : BuildingPlanner::findOrder()){
		if (build.unitType.mineralPrice() <= (Broodwar->self()->minerals() - InformationManager::reservedMinerals) &&
			build.unitType.gasPrice() <= (Broodwar->self()->gas() - InformationManager::reservedGas)){
			if (build.unitType.isBuilding()){
				bool ip = false;
				for (auto bu : builders){
					if (bu->buildingProject == build.unitType){
						ip = true;
					}
				}
				if (!ip && Broodwar->self()->incompleteUnitCount(build.unitType) < 1){
					hireBuilder(build.unitType);
					//buildOrTrain(build.unitType);
				}
			}
			else{
				buildOrTrain(build.unitType);
			}
			
		}
		else{ break; }
	}

	builderStateMachine();
}

void BuildingPlacer::hireBuilder(UnitType ut){
	for (auto w : InformationManager::workerUnits){
		if (!w->unit->isCarryingMinerals() && !w->gasworker && !w->builder){
			for (unsigned int i = 0; i < w->mineral->workers.size(); i++){
				if (w->mineral->workers.at(i) = w->unit){
					w->mineral->workers.erase(w->mineral->workers.begin() + i);
					w->inQ = false;
					w->returningCargo = false;
					w->state = 0;
				}
			}
			w->builder = true;
			w->buildingProject = ut;
			builders.insert(w);
			break;
		}
	}
}

void BuildingPlacer::releaseBuilder(WorkerUnit* w){
	builders.erase(w);
	w->builder = false;
	w->inQ = false;
	w->state = 0;
	w->gasworker = false;
	w->returningCargo = false;
}

void BuildingPlacer::builderStateMachine(){
	for (auto b : builders){
		TilePosition buildTile = getBuildTile(b->buildingProject, Broodwar->self()->getStartLocation());
		UnitType unitype = b->buildingProject;
		switch (b->state){
		case 0:	// Initial State

			if (b->unit->isConstructing()){
				b->state = 1;
			}
			else{
				if (buildTile != TilePositions::None) {
					// Register an event that draws the target build location
					Broodwar->registerEvent([buildTile, unitype](Game*)
					{
						Broodwar->drawBoxMap(Position(buildTile),
							Position(buildTile + unitype.tileSize()),
							Colors::Green);
					},
						nullptr,  // condition
						unitype.buildTime() + 100);  // frames to run
					InformationManager::reservedMinerals += unitype.mineralPrice();
					InformationManager::reservedGas += unitype.gasPrice();
					b->unit->build(unitype, buildTile);
					InformationManager::orderedBuildings.push_back(unitype);
					Broodwar << "worker " << std::to_string(b->unit->getID()) << " is building " << unitype.toString() << std::endl;
				}
			}

			break;
		case 1:	// Is constructing

			if (!b->unit->isConstructing()){
				releaseBuilder(b);
			}
			break;
		}
	}

}

void BuildingPlacer::buildOrTrain(UnitType ut){
	if (ut.isBuilding()){
		bool inProgress = false;
		for (auto &b : InformationManager::orderedBuildings){
			if (ut == b){
				inProgress = true;
			}
		}
		if (!inProgress){
			for (auto myUnit : InformationManager::workerUnits) {

				if (myUnit->unit != IntelManager::scout->unit && !myUnit->unit->isConstructing() && !myUnit->unit->isGatheringGas()) {
					//Find a builtile
					TilePosition buildTile = getBuildTile(ut, Broodwar->self()->getStartLocation());
					//and, if found, send the worker to build it (and leave others alone - break;)
					if (buildTile != TilePositions::None) {
						// Register an event that draws the target build location
						Broodwar->registerEvent([buildTile, ut](Game*)
						{
							Broodwar->drawBoxMap(Position(buildTile),
								Position(buildTile + ut.tileSize()),
								Colors::Green);
						},
							nullptr,  // condition
							ut.buildTime() + 100);  // frames to run
						InformationManager::reservedMinerals += ut.mineralPrice();
						InformationManager::reservedGas += ut.gasPrice();
						myUnit->unit->build(ut, buildTile);
						InformationManager::orderedBuildings.push_back(ut);
						Broodwar << "worker is building " << ut.toString() << std::endl;
						break;
					}
					else{
						//Broodwar << "Expantion BuildTile = none" << std::endl;
						if (InformationManager::ourRace == Races::Protoss && Broodwar->self()->completedUnitCount(UnitTypes::Protoss_Pylon) < 1){
							buildOrTrain(UnitTypes::Protoss_Pylon);
						}
						break;
					}
				}
			}
		}
	}
	else{
		for (auto &u : Broodwar->self()->getUnits()){//Tp be refactored with more dynamic code
			if (u->canTrain(ut) && u->isIdle()){
				u->train(ut);
				//Broodwar << u->getType().toString() << " is building " << toBuild.toString() << std::endl;
				break;
			}
		}
	}
}


// Returns a suitable TilePosition to build a given building type near
// specified TilePosition aroundTile, or null if not found. (builder parameter is our worker)
TilePosition BuildingPlacer::getBuildTile(UnitType buildingType, TilePosition aroundTile) {
	TilePosition ret = TilePositions::None;
	int maxDist = 1;
	int stopDist = 40;
	
	// Refinery, Assimilator, Extractor
	if (buildingType.isRefinery()) {
		for (const auto& geyser : BWTA::getStartLocation(Broodwar->self())->getGeysers()) {
			TilePosition p1 = geyser->getInitialTilePosition();
			if (geyser->exists()){
				return p1;
			}
		}
		Broodwar << "couldnt find a geyser" << std::endl;
	}
	if (buildingType.isResourceDepot()){
		return naturalExpantion();
	}


	while ((maxDist < stopDist) && (ret == TilePositions::None)) {
		for (int i = aroundTile.x - maxDist; i <= aroundTile.x + maxDist; i++) {
			for (int j = aroundTile.y - maxDist; j <= aroundTile.y + maxDist; j++) {
				if (Broodwar->canBuildHere(TilePosition(i, j), buildingType, false)) {
					// units that are blocking the tile
					bool unitsInWay = false;
					for (Unit u : Broodwar->getAllUnits()) {
						//if (u->getID() == builder->getID()) { continue; }
						if ((std::abs(u->getTilePosition().x - i) < 4) && (std::abs(u->getTilePosition().y - j) < 4)) { unitsInWay = true; }
					}
					if (!unitsInWay) {
						return TilePosition(i, j);
					}
					// creep for Zerg
					if (buildingType.requiresCreep()) {
						bool creepMissing = false;
						for (int k = i; k <= i + buildingType.tileWidth(); k++) {
							for (int l = j; l <= j + buildingType.tileHeight(); l++) {
								if (!Broodwar->hasCreep(k, l)) { creepMissing = true; }
								break;
							}
						}
						if (creepMissing) { continue; }
					}
				}
			}
		}
		maxDist ++;
	}

	if (ret == TilePositions::None) { Broodwar << "Unable to find suitable build position for " << buildingType.toString() << std::endl; }
	return ret;
}

TilePosition BuildingPlacer::naturalExpantion(){
	double groundDist = 10000;
	int i = 0;
	int erase_itr = 0;
	TilePosition buildTile = TilePositions::None;
	for (auto &b : InformationManager::baseLocations){
		if (b != InformationManager::mainBase && b->getGroundDistance(InformationManager::mainBase) < groundDist &&
			!b->isIsland() && Broodwar->canBuildHere(b->getTilePosition(), Broodwar->self()->getRace().getCenter())){
			groundDist = b->getGroundDistance(InformationManager::mainBase);
			buildTile = b->getTilePosition();
			erase_itr = i;
		}
		i++;
	}
	InformationManager::baseLocations.erase(InformationManager::baseLocations.begin() + erase_itr);
	return buildTile;
}

void BuildingPlacer::createType(BWAPI::UnitType unit){
	if (unit.isBuilding()){
		Unit builder;
		TilePosition buildtile = getBuildTile(unit, Broodwar->self()->getStartLocation());
		double dist = 10000;
		for (auto &c : InformationManager::centers){
			for (auto &u : c.wrkUnits){
				if (BWTA::getGroundDistance(buildtile,u.unit->getTilePosition()) > dist){
					builder = u.unit;
					break;
				}
			}
		}
		//TilePosition buildtile = getBuildTile(unit, Broodwar->self()->getStartLocation());
		if (builder){
			builder->build(unit, buildtile);
		}
	}
	else{
		Unit trainer;
		for (auto &u : InformationManager::ourUnits){
			if (u.self->canTrain(unit)){
				trainer = u.self;
				break;
			}
		}
		if (trainer){
			trainer->train(unit);
		}
	}

}